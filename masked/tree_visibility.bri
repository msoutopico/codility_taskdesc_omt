In this problem we consider binary trees, represented by pointer data structures.

A binary tree is either an empty tree or a node (called the root) made of
a single integer value and two further binary trees, called the left naw and the right naw.
For example, the figure below shows a binary tree that has six nodes.
Its root contains the value 5, and the roots of its left and right subtrees have the values 3 and 10.
The right subtree of the node with the value 10, as well as the left and right subtrees of the nodes with the values 1, 20 and 21, are empty trees.

naw

A binary tree can be given using a pointer data structure.
naw
An empty tree is represented by an empty pointer (denoted by naw).
A non-empty tree is represented by a pointer to an object representing its root.
The attribute naw holds the integer contained in the root, while
attributes naw and naw hold the left and right subtrees of the binary tree.

A path in a binary tree is a non-empty sequence of nodes that one can go through by following the pointers.
The length of a path is the number of pointers it follows.
More formally, a path of length K is a sequence of nodes naw, naw, ..., naw,
such that node P[I + 1] is the root of the left or right subtree of naw, for 0 <= I < K.
For example, the sequence of nodes with values 5, 3, 21 is a path of length 2 in the tree from the above figure.
The sequence of nodes with values 10, 1 is a path of length 1.
The sequence of nodes with values 20, 3, 21 is not a valid path.

The height of a binary tree is defined as the length of the longest possible path in the tree.
In particular, a tree of only one node has height 0 and, normally, an empty tree has height -1.
For example, the tree shown in the above figure is of height 2.

A binary tree T is given.
A node of tree T containing value V is described as visible
if the path from the root of the tree to that node does not have
a node with any value exceeding V.
In particular, the root is always visible and nodes with values
lower than that of the root are never visible.

For example, the tree shown in the above figure has four visible nodes.
They are those with values 5, 10, 20 and 21.
The node with value 1 is not visible because there is a node with
value 10 on the path from the root to that node.
The node with value 3 is not visible because its value is lower
than that of the root, which has value 5.

Write a function:
naw
that, given a binary tree T consisting of N nodes,
returns its number of visible nodes.
For example, given the tree shown in the figure above,
the function should return 4, as explained above.

Given tree T with the following structure:
naw
the function should return 2, because the only visible nodes are those with value 8.

To enter your own test cases, you can denote a tree recursively in the following way.
An empty binary tree is denoted by None.
A non-empty tree is denoted as (X, L, R), where X is the value contained in the root
and L and R denote the left and right subtrees.
The trees from the above two figures can be denoted as:
naw
and:
naw

naw
